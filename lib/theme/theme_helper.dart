import 'dart:ui';
import 'package:flutter/material.dart';
import '../../core/app_export.dart';

/// Helper class for managing themes and colors.
class ThemeHelper {
  // The current app theme
  var _appTheme = PrefUtils().getThemeData();

// A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: colorScheme.onErrorContainer.withOpacity(1),
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: colorScheme.primary,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(24.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Colors.transparent,
          side: BorderSide(
            color: appTheme.indigoA10001,
            width: 1.h,
          ),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(24.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      checkboxTheme: CheckboxThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return colorScheme.primary;
          }
          return colorScheme.onSurface;
        }),
        side: BorderSide(
          width: 1,
        ),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      dividerTheme: DividerThemeData(
        thickness: 160,
        space: 160,
        color: appTheme.pink500.withOpacity(0.49),
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: colorScheme.onPrimaryContainer,
          fontSize: 16.fSize,
          fontFamily: 'Eudoxus Sans',
          fontWeight: FontWeight.w400,
        ),
        bodyMedium: TextStyle(
          color: appTheme.blueGray400,
          fontSize: 14.fSize,
          fontFamily: 'Eudoxus Sans',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: appTheme.gray600,
          fontSize: 12.fSize,
          fontFamily: 'Eudoxus Sans',
          fontWeight: FontWeight.w400,
        ),
        displaySmall: TextStyle(
          color: appTheme.gray900,
          fontSize: 36.fSize,
          fontFamily: 'Eudoxus Sans',
          fontWeight: FontWeight.w700,
        ),
        headlineSmall: TextStyle(
          color: colorScheme.onPrimaryContainer,
          fontSize: 24.fSize,
          fontFamily: 'Eudoxus Sans',
          fontWeight: FontWeight.w700,
        ),
        labelLarge: TextStyle(
          color: colorScheme.onPrimaryContainer,
          fontSize: 12.fSize,
          fontFamily: 'Eudoxus Sans',
          fontWeight: FontWeight.w700,
        ),
        titleMedium: TextStyle(
          color: colorScheme.onPrimaryContainer,
          fontSize: 18.fSize,
          fontFamily: 'Eudoxus Sans',
          fontWeight: FontWeight.w700,
        ),
        titleSmall: TextStyle(
          color: colorScheme.onPrimaryContainer,
          fontSize: 14.fSize,
          fontFamily: 'Eudoxus Sans',
          fontWeight: FontWeight.w700,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFF3500D4),
    primaryContainer: Color(0XFF000000),

    // Error colors
    errorContainer: Color(0XFFD80027),
    onErrorContainer: Color(0X66FFFFFF),

    // On colors(text colors)
    onPrimary: Color(0X661DCC98),
    onPrimaryContainer: Color(0XFF03314B),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Amber
  Color get amber500 => Color(0XFFFFC107);
  Color get amberA200 => Color(0XFFFFDA44);

  // Blue
  Color get blue50 => Color(0XFFE8F1FF);
  Color get blue500 => Color(0XFF1B9DF0);
  Color get blue700 => Color(0XFF1D82CC);
  Color get blue800 => Color(0XFF0D42CB);

  // Bluef
  Color get blue6007f => Color(0X7F3891D2);

  // BlueGray
  Color get blueGray100 => Color(0XFFD3D5DA);
  Color get blueGray300 => Color(0XFF9EA3AE);
  Color get blueGray400 => Color(0XFF8198A5);

  // DeepOrange
  Color get deepOrangeA200 => Color(0XFFFF6740);

  // Gray
  Color get gray100 => Color(0XFFF4F4F6);
  Color get gray10001 => Color(0XFFF3F3FF);
  Color get gray400 => Color(0XFFB3B3B3);
  Color get gray50 => Color(0XFFF5F5FD);
  Color get gray5001 => Color(0XFFF9FAFB);
  Color get gray600 => Color(0XFF6C727F);
  Color get gray900 => Color(0XFF121826);

  // Green
  Color get green50 => Color(0XFFE8F9DC);
  Color get green500 => Color(0XFF4CAF50);
  Color get greenA700 => Color(0XFF1ED760);

  // Indigo
  Color get indigo50 => Color(0XFFE5E6EB);
  Color get indigo800 => Color(0XFF283593);
  Color get indigo900 => Color(0XFF202060);
  Color get indigoA100 => Color(0XFFA5A6F6);
  Color get indigoA10001 => Color(0XFF908FEC);
  Color get indigoA10066 => Color(0X66928FFF);
  Color get indigoA700 => Color(0XFF1D4BFF);

  // LightGreen
  Color get lightGreen50 => Color(0XFFF3FBED);
  Color get lightGreen50066 => Color(0X668EE04E);
  Color get lightGreen900 => Color(0XFF1B7A00);

  // Orange
  Color get orange20066 => Color(0X66FFC07A);

  // Pink
  Color get pink50 => Color(0XFFFCDDEC);
  Color get pink500 => Color(0XFFF61C7A);
  Color get pinkA100 => Color(0XFFF178B6);

  // Red
  Color get red50 => Color(0XFFFFEFEB);
  Color get red500 => Color(0XFFEA4335);
  Color get red700 => Color(0XFFE82127);
  Color get red900 => Color(0XFF932205);

  // Teal
  Color get teal200 => Color(0XFF8EE5CB);
  Color get teal50 => Color(0XFFE0F8F1);
  Color get teal5001 => Color(0XFFE0F7F0);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
