import 'bloc/sign_up_empty_state_bloc.dart';import 'models/sign_up_empty_state_model.dart';import 'package:flutter/material.dart';import 'package:hari_s_application3/core/app_export.dart';import 'package:hari_s_application3/core/utils/validation_functions.dart';import 'package:hari_s_application3/widgets/app_bar/appbar_leading_iconbutton.dart';import 'package:hari_s_application3/widgets/app_bar/custom_app_bar.dart';import 'package:hari_s_application3/widgets/custom_checkbox_button.dart';import 'package:hari_s_application3/widgets/custom_elevated_button.dart';import 'package:hari_s_application3/widgets/custom_text_form_field.dart';
// ignore_for_file: must_be_immutable
class SignUpEmptyStateScreen extends StatelessWidget {SignUpEmptyStateScreen({Key? key}) : super(key: key);

GlobalKey<FormState> _formKey = GlobalKey<FormState>();

static Widget builder(BuildContext context) { return BlocProvider<SignUpEmptyStateBloc>(create: (context) => SignUpEmptyStateBloc(SignUpEmptyStateState(signUpEmptyStateModelObj: SignUpEmptyStateModel()))..add(SignUpEmptyStateInitialEvent()), child: SignUpEmptyStateScreen()); } 
@override Widget build(BuildContext context) { mediaQueryData = MediaQuery.of(context); return SafeArea(child: Scaffold(resizeToAvoidBottomInset: false, appBar: _buildAppBar(context), body: Form(key: _formKey, child: Container(width: double.maxFinite, padding: EdgeInsets.symmetric(horizontal: 24.h, vertical: 27.v), child: Column(children: [Align(alignment: Alignment.centerLeft, child: Row(crossAxisAlignment: CrossAxisAlignment.start, children: [CustomImageView(imagePath: ImageConstant.imgGroup10, height: 27.v, width: 31.h, margin: EdgeInsets.only(bottom: 3.v)), Padding(padding: EdgeInsets.only(left: 1.h, top: 7.v), child: Text("lbl_arrow_trade".tr, style: CustomTextStyles.titleMediumKodchasanPrimary))])), SizedBox(height: 42.v), Align(alignment: Alignment.centerLeft, child: Text("lbl_getting_started".tr, style: theme.textTheme.headlineSmall)), SizedBox(height: 17.v), Align(alignment: Alignment.centerLeft, child: Text("msg_create_an_account".tr, style: theme.textTheme.bodyMedium)), SizedBox(height: 46.v), _buildFullNameEditText(context), SizedBox(height: 20.v), _buildEmailEditText(context), SizedBox(height: 20.v), _buildPasswordEditText(context), SizedBox(height: 32.v), _buildCheckBox(context), SizedBox(height: 59.v), _buildStartButton(context), SizedBox(height: 29.v), RichText(text: TextSpan(children: [TextSpan(text: "msg_already_have_an2".tr, style: CustomTextStyles.bodyMediumOnPrimaryContainer), TextSpan(text: "lbl_sign_in".tr, style: CustomTextStyles.bodyMediumPrimary)]), textAlign: TextAlign.left), SizedBox(height: 5.v)]))))); } 
/// Section Widget
PreferredSizeWidget _buildAppBar(BuildContext context) { return CustomAppBar(leadingWidth: double.maxFinite, leading: AppbarLeadingIconbutton(imagePath: ImageConstant.imgClose, margin: EdgeInsets.fromLTRB(24.h, 8.v, 311.h, 8.v), onTap: () {onTapClose(context);})); } 
/// Section Widget
Widget _buildFullNameEditText(BuildContext context) { return BlocSelector<SignUpEmptyStateBloc, SignUpEmptyStateState, TextEditingController?>(selector: (state) => state.fullNameEditTextController, builder: (context, fullNameEditTextController) {return CustomTextFormField(controller: fullNameEditTextController, hintText: "lbl_full_name".tr, hintStyle: CustomTextStyles.bodyLargeGray600, validator: (value) {if (!isText(value)) {return "err_msg_please_enter_valid_text".tr;} return null;});}); } 
/// Section Widget
Widget _buildEmailEditText(BuildContext context) { return BlocSelector<SignUpEmptyStateBloc, SignUpEmptyStateState, TextEditingController?>(selector: (state) => state.emailEditTextController, builder: (context, emailEditTextController) {return CustomTextFormField(controller: emailEditTextController, hintText: "lbl_email_address".tr, hintStyle: CustomTextStyles.bodyLargeGray600, textInputType: TextInputType.emailAddress, validator: (value) {if (value == null || (!isValidEmail(value, isRequired: true))) {return "err_msg_please_enter_valid_email".tr;} return null;});}); } 
/// Section Widget
Widget _buildPasswordEditText(BuildContext context) { return BlocBuilder<SignUpEmptyStateBloc, SignUpEmptyStateState>(builder: (context, state) {return CustomTextFormField(controller: state.passwordEditTextController, hintText: "lbl_password".tr, hintStyle: CustomTextStyles.bodyLargeGray600, textInputAction: TextInputAction.done, textInputType: TextInputType.visiblePassword, suffix: InkWell(onTap: () {context.read<SignUpEmptyStateBloc>().add(ChangePasswordVisibilityEvent(value: !state.isShowPassword));}, child: Container(margin: EdgeInsets.fromLTRB(30.h, 20.v, 24.h, 20.v), child: CustomImageView(imagePath: ImageConstant.imgEye, height: 24.adaptSize, width: 24.adaptSize))), suffixConstraints: BoxConstraints(maxHeight: 64.v), validator: (value) {if (value == null || (!isValidPassword(value, isRequired: true))) {return "err_msg_please_enter_valid_password".tr;} return null;}, obscureText: state.isShowPassword, contentPadding: EdgeInsets.only(left: 24.h, top: 21.v, bottom: 21.v));}); } 
/// Section Widget
Widget _buildCheckBox(BuildContext context) { return Align(alignment: Alignment.centerLeft, child: Padding(padding: EdgeInsets.only(right: 24.h), child: BlocSelector<SignUpEmptyStateBloc, SignUpEmptyStateState, bool?>(selector: (state) => state.checkBox, builder: (context, checkBox) {return CustomCheckboxButton(alignment: Alignment.centerLeft, text: "msg_i_agree_to_the_terms".tr, value: checkBox, onChange: (value) {context.read<SignUpEmptyStateBloc>().add(ChangeCheckBoxEvent(value: value));});}))); } 
/// Section Widget
Widget _buildStartButton(BuildContext context) { return Opacity(opacity: 0.6, child: CustomElevatedButton(text: "lbl_start".tr, buttonStyle: CustomButtonStyles.fillPrimaryTL24)); } 

/// Navigates to the previous screen.
onTapClose(BuildContext context) { NavigatorService.goBack(); } 
 }
