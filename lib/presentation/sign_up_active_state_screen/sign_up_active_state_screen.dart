import 'bloc/sign_up_active_state_bloc.dart';import 'models/sign_up_active_state_model.dart';import 'package:flutter/material.dart';import 'package:hari_s_application3/core/app_export.dart';import 'package:hari_s_application3/core/utils/validation_functions.dart';import 'package:hari_s_application3/widgets/app_bar/appbar_leading_iconbutton.dart';import 'package:hari_s_application3/widgets/app_bar/custom_app_bar.dart';import 'package:hari_s_application3/widgets/custom_checkbox_button.dart';import 'package:hari_s_application3/widgets/custom_elevated_button.dart';import 'package:hari_s_application3/widgets/custom_floating_text_field.dart';
// ignore_for_file: must_be_immutable
class SignUpActiveStateScreen extends StatelessWidget {SignUpActiveStateScreen({Key? key}) : super(key: key);

GlobalKey<FormState> _formKey = GlobalKey<FormState>();

static Widget builder(BuildContext context) { return BlocProvider<SignUpActiveStateBloc>(create: (context) => SignUpActiveStateBloc(SignUpActiveStateState(signUpActiveStateModelObj: SignUpActiveStateModel()))..add(SignUpActiveStateInitialEvent()), child: SignUpActiveStateScreen()); } 
@override Widget build(BuildContext context) { mediaQueryData = MediaQuery.of(context); return SafeArea(child: Scaffold(resizeToAvoidBottomInset: false, appBar: _buildAppBar(context), body: Form(key: _formKey, child: Container(width: double.maxFinite, padding: EdgeInsets.symmetric(horizontal: 24.h, vertical: 27.v), child: Column(children: [Align(alignment: Alignment.centerLeft, child: Row(crossAxisAlignment: CrossAxisAlignment.start, children: [CustomImageView(imagePath: ImageConstant.imgGroup10, height: 27.v, width: 31.h, margin: EdgeInsets.only(bottom: 3.v)), Padding(padding: EdgeInsets.only(left: 2.h, top: 7.v), child: Text("lbl_arrow_trade".tr, style: CustomTextStyles.titleMediumKodchasanPrimary))])), SizedBox(height: 42.v), Align(alignment: Alignment.centerLeft, child: Text("lbl_getting_started".tr, style: theme.textTheme.headlineSmall)), SizedBox(height: 17.v), Align(alignment: Alignment.centerLeft, child: Text("msg_create_an_account".tr, style: theme.textTheme.bodyMedium)), SizedBox(height: 34.v), _buildFullName(context), SizedBox(height: 8.v), _buildEmail(context), SizedBox(height: 8.v), _buildPassword(context), SizedBox(height: 32.v), _buildCheckmark(context), SizedBox(height: 59.v), _buildStart(context), SizedBox(height: 29.v), RichText(text: TextSpan(children: [TextSpan(text: "msg_already_have_an2".tr, style: CustomTextStyles.bodyMediumOnPrimaryContainer), TextSpan(text: "lbl_sign_in".tr, style: CustomTextStyles.bodyMediumPrimary)]), textAlign: TextAlign.left), SizedBox(height: 5.v)]))))); } 
/// Section Widget
PreferredSizeWidget _buildAppBar(BuildContext context) { return CustomAppBar(leadingWidth: double.maxFinite, leading: AppbarLeadingIconbutton(imagePath: ImageConstant.imgClose, margin: EdgeInsets.fromLTRB(24.h, 8.v, 311.h, 8.v), onTap: () {onTapClose(context);})); } 
/// Section Widget
Widget _buildFullName(BuildContext context) { return BlocSelector<SignUpActiveStateBloc, SignUpActiveStateState, TextEditingController?>(selector: (state) => state.fullNameController, builder: (context, fullNameController) {return CustomFloatingTextField(controller: fullNameController, labelText: "lbl_full_name".tr, labelStyle: theme.textTheme.bodyLarge!, hintText: "lbl_full_name".tr, validator: (value) {if (!isText(value)) {return "err_msg_please_enter_valid_text".tr;} return null;});}); } 
/// Section Widget
Widget _buildEmail(BuildContext context) { return BlocSelector<SignUpActiveStateBloc, SignUpActiveStateState, TextEditingController?>(selector: (state) => state.emailController, builder: (context, emailController) {return CustomFloatingTextField(controller: emailController, labelText: "lbl_email_address".tr, labelStyle: theme.textTheme.bodyLarge!, hintText: "lbl_email_address".tr, textInputType: TextInputType.emailAddress, validator: (value) {if (value == null || (!isValidEmail(value, isRequired: true))) {return "err_msg_please_enter_valid_email".tr;} return null;});}); } 
/// Section Widget
Widget _buildPassword(BuildContext context) { return BlocBuilder<SignUpActiveStateBloc, SignUpActiveStateState>(builder: (context, state) {return CustomFloatingTextField(controller: state.passwordController, labelText: "lbl_password".tr, labelStyle: CustomTextStyles.bodyLargeGray900, hintText: "lbl_password".tr, textInputAction: TextInputAction.done, textInputType: TextInputType.visiblePassword, obscureText: state.isShowPassword, suffix: InkWell(onTap: () {context.read<SignUpActiveStateBloc>().add(ChangePasswordVisibilityEvent(value: !state.isShowPassword));}, child: Container(margin: EdgeInsets.symmetric(horizontal: 24.h), child: CustomImageView(imagePath: ImageConstant.imgEye, height: 24.adaptSize, width: 24.adaptSize))), suffixConstraints: BoxConstraints(maxHeight: 76.v), validator: (value) {if (value == null || (!isValidPassword(value, isRequired: true))) {return "err_msg_please_enter_valid_password".tr;} return null;});}); } 
/// Section Widget
Widget _buildCheckmark(BuildContext context) { return Align(alignment: Alignment.centerLeft, child: Padding(padding: EdgeInsets.only(right: 24.h), child: BlocSelector<SignUpActiveStateBloc, SignUpActiveStateState, bool?>(selector: (state) => state.checkmark, builder: (context, checkmark) {return CustomCheckboxButton(alignment: Alignment.centerLeft, text: "msg_i_agree_to_the_terms".tr, value: checkmark, onChange: (value) {context.read<SignUpActiveStateBloc>().add(ChangeCheckBoxEvent(value: value));});}))); } 
/// Section Widget
Widget _buildStart(BuildContext context) { return CustomElevatedButton(text: "lbl_start".tr); } 

/// Navigates to the previous screen.
onTapClose(BuildContext context) { NavigatorService.goBack(); } 
 }
